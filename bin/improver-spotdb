#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

"""Script to run spot database creation from spot data."""

import iris

import numpy as np

from improver.database  import SpotDatabase
from improver.argparser import ArgParser


def main():
    """
    Load in the arguments and apply the requested variant of database creation.
    """
    parser = ArgParser(
        description='Create or append to a database a set of forecast cubes')

    # General options:
    parser.add_argument('-i', '--input_filepaths', nargs='*', required=True,
                        metavar='INPUT_FILES',
                        help='A path to an input NetCDF file to be processed.')
    parser.add_argument('-o', '--output_filepath', required=True,
                        metavar='OUTPUT_FILE',
                        help='The output path for the processed database.')
                                             
                        
    # Different file formats (default to SQLite DB):
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--sqlite', default=True, action='store_true',
                       help='Create or append to a SQLite Database file.')
    group.add_argument('--csv', default=False, action='store_true',
                       help='The option used to create a CSV file.')

    # Some options pertaining to the structure of the table.
    structure = parser.add_argument_group(
        'Table format options', 'Options for structure of the output table.')
    structure.add_argument('-rows', '--row_dimension',
                            default='time',
                            help='A dimension to turn into the table rows')

    args = parser.parse_args()

    cubelist = iris.load(args.input_filepaths)
    # TODO: Move this to the plugin itself?
    for cube in cubelist:
        if not cube.coords(args.row_dimension):
            msg = ('The input cube: {} does not have a '
                   '{} dimension.'.format(cube, columns))
            raise CoordinateNotFoundError(msg)

    # TODO: For now, assume only doing percentiles -> percentiles.
    # TODO: Support for probabilities is not yet provided.
     
    db = SpotDatabase(cubelist, args.row_dimension)
    print db
    db.to_dataframe()
    if args.sqlite:
        pass
        #db.to_sql()
    
    if args.csv:
        db.to_csv()

if __name__ == '__main__':
    main()
