#!/usr/bin/env python
# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# (C) British Crown Copyright 2017 Met Office.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
"""Script to run neighbourhood processing."""

import argparse

import iris

from improver.nbhood import NeighbourhoodProcessing


def main():
    """Load in arguments and get going."""
    parser = argparse.ArgumentParser(
    description='Apply the requested neighbourhood method via ' +
                'the NeighbourhoodProcessing plugin ' +
                'to a file with one cube.')
    parser.add_argument('neighhourhood_method', metavar='NEIGHBOURHOOD_METHOD',
                        help='The neighbourhood method to apply in '
                             'neighbourhood processing. Options: "circular".')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--radius-in-km', metavar='RADIUS', type=float,
                       help='The radius for neighbourhood processing')
    group.add_argument('--radii-in-km-by-lead-time',
                       metavar=('RADIUS_BY_LEAD_TIME', 'LEAD_TIME_IN_HOURS'),
                       nargs=2,
                       help='The radii for neighbourhood processing '
                       'and the associated lead times at which the radii are '
                       'valid. The radii are in km whilst the lead time '
                       'has units of hours. The radii and lead times are '
                       'expected as individual comma-separated lists with '
                       'the list of radii given first followed by a list of '
                       'lead times to indicate at what lead time each radii '
                       'should be used. For example: 10,12,14 1,2,3 '
                       'where a lead time of 1 hour uses a radius of 10km, '
                       'a lead time of 2 hours uses a radius of 12km, etc.')
    parser.add_argument('input_filepath', metavar='INPUT_FILE',
                        help='A path to an input NetCDF file to be processed')
    parser.add_argument('output_filepath', metavar='OUTPUT_FILE',
                        help='The output path for the processed NetCDF')
    args = parser.parse_args()
    cube = iris.load_cube(args.input_filepath)
    if args.radius_in_km:
        radius_or_radii_in_km = args.radius_in_km
        lead_times = None
    elif args.radii_in_km_by_lead_time:
        radius_or_radii_in_km = args.radii_in_km_by_lead_time[0].split(",")
        lead_times = args.radii_in_km_by_lead_time[1].split(",")
    result = (
        NeighbourhoodProcessing(
            args.kernel_method, radius_or_radii_in_km,
            lead_times=lead_times).process(cube))
    iris.save(result, args.output_filepath, unlimited_dimensions=[])


if __name__ == "__main__":
    main()
